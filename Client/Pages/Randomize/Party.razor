@page "/Randomize/Party"

@if (_heroes is null || _classes is null)
{
    <p>Loading heroes and classes...</p>
}
else if (!_heroes.Any() || !_classes.Any())
{
    <p>There must be both heroes and classes in the database in order to generate a random party.</p>
}
else
{
    <RadzenTemplateForm TItem="RandomPartyRequest" Data="@_request" Submit="@Submit">
        <RadzenFieldset Text="Generate Party">
            <InputComponent Label="Number of Characters">
                <RadzenNumeric @bind-Value="@_request.NumberOfCharacters" Min="1" Max="4" Style="width: 100%" />
            </InputComponent>
            <InputComponent Label="Randomization Critera">
                <RadzenDropDown @bind-Value="@_request.Criteria" TValue="Criteria" Data="Utility.EnumUtilities.GetCriterias()" TextProperty="Name" ValueProperty="Value" Style="width: 100%" />
            </InputComponent>
            <InputComponent Label="Max Number of Each Archetype">
                <RadzenNumeric @bind-Value="@_request.MaxNumberOfEachArchetype" Min="1" Max="4" Style="width: 100%" Disabled="@(_request.Criteria != Criteria.MaxXOfEachArchetype)" />
            </InputComponent>
            <InputComponent Label="Exclude Heroes">
                <RadzenDropDown AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @bind-Value="@_request.HeroesToExclude"
                                Multiple="true" Placeholder="Select any heroes to exlude from randomization..." Data="@_heroes" TextProperty="Name" ValueProperty="Id"
                                Style="width: 100%" />
            </InputComponent>
            <InputComponent Label="Exclude Classes">
                <RadzenDropDown AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @bind-Value="@_request.ClassesToExclude"
                                Multiple="true" Placeholder="Select any classes to exlude from randomization..." Data="@_classes" TextProperty="Name" ValueProperty="Id"
                                Style="width: 100%" />
            </InputComponent>
            <InputComponent Label="Allow Hybris Classes">
                <RadzenCheckBox @bind-Value="@_request.AllowHybridClasses" />
            </InputComponent>
            <AlignedButton Alignment="Alignment.Right" ButtonType="ButtonType.Submit" Text="Randomize Party" />
        </RadzenFieldset>
    </RadzenTemplateForm>

    @if (_party != null && _party.Any())
    {
        <RadzenFieldset Text="Generated Party">
            <div class="row">
                @foreach (var character in _party)
                {
                    <div class="col-12 col-md-6 mb-2">
                        <RadzenCard>
                            <div class="row d-flex">
                                <div class="col mr-auto">
                                    Hero: @character.Hero.Name
                                </div>
                                <RadzenButton ButtonType="ButtonType.Button" Click="() => ShowHeroDetails(character.Hero)" Icon="list"
                                              MouseEnter="@(args => ShowTooltip(args, "Show Details"))" Style="margin-right: 1rem; margin-bottom: 0.5rem;" />
                            </div>
                            <div class="row d-flex">
                                <div class="col mr-auto">
                                    Main Class: @character.MainClass.Name
                                </div>
                                <RadzenButton ButtonType="ButtonType.Button" Click="() => ShowClassDetails(character.MainClass)" Icon="list"
                                              MouseEnter="@(args => ShowTooltip(args, "Show Details"))" Style="margin-right: 1rem; margin-bottom: 0.5rem;" />
                            </div>
                            <div class="row d-flex">
                                <div class="col mr-auto">
                                    Hybrid Class: @(character.SecondaryClass is null ? "-" : character.SecondaryClass.Name)
                                </div>
                                <RadzenButton ButtonType="ButtonType.Button" Disabled="character.SecondaryClass is null"
                                              Click="() => ShowClassDetails(character.SecondaryClass)" Icon="list"
                                              MouseEnter="@(args => ShowTooltip(args, "Show Details"))" Style="margin-right: 1rem; margin-bottom: 0.5rem;" />
                            </div>
                        </RadzenCard>
                    </div>
                }
            </div>
        </RadzenFieldset>
    }
}